1. Always SET ENV vars first. With CLASSPATH set, Java can find both the ANTLR tool and the runtime library.

>run1-set-env-antlr-claspath.bat
>run2-set-antlr4-Tool.bat
>run3-set-grun-TestRig.bat


2. generate antlr artifacts, generates listeners by default
> antlr4  ShortestCobolGrammar.g4

//or same via
> java org.antlr.v4.Tool ShortestCobolGrammar.g4

//or to generate both: visitors and listeners 
> antlr4 -visitor ShortestCobolGrammar.g4

//or just generate visitor and exclude listener 
> antlr4 -no-listener -visitor ShortestCobolGrammar.g4

//or to generate for other languages 
>antlr4  ShortestCobolGrammar.g4   (by default JAVA)
>antlr4 -Dlanguage=Python3 ShortestCobolGrammar.g4
>antlr4 -Dlanguage=CSharp ShortestCobolGrammar.g4
>antlr4 -Dlanguage=JavaScript ShortestCobolGrammar.g4


3. compile generated Java source files
> javac ShortestCobolGrammar*.java
  

4. RUN   (parser rule name, e.g cobolProgram  )
>grun ShortestCobolGrammar cobolProgram -tokens

enter: 

IDENTIFICATION DIVISION. 
PROGRAM-ID. my-shortest-cobol.
PROCEDURE DIVISION. DISPLAY "Shortest  COBOL  Program".
    
or
>grun ShortestCobolGrammar cobolProgram -gui --diagnostics
>grun ShortestCobolGrammar cobolProgram -gui
>grun ShortestCobolGrammar cobolProgram -tree

//That ^D means EOF on unix; it's ^Z in Windows.

--- to see grun options
>grun  
-tokens prints out the token stream.
-tree prints out the parse tree in LISP form.
-gui displays the parse tree visually in a dialog box.
-ps file.ps generates a visual representation of the parse tree in PostScript and
stores it in file.ps. The parse tree figures in this chapter were generated
with -ps.
-encoding encodingname specifies the test rig input file encoding if the current
locale would not read the input properly.
-trace prints the rule name and current token upon rule entry and exit.
-diagnostics turns on diagnostic messages during parsing.
-SLL uses a faster but slightly weaker parsing strategy. 






